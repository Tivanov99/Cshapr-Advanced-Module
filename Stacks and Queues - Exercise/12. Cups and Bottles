using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace StacksAndQueues
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] cups = Console.ReadLine().Split().Select(int.Parse).ToArray();
            Queue<int> Cups = new Queue<int>(cups);
            int[] bottles = Console.ReadLine().Split().Select(int.Parse).ToArray();
            Stack<int> Bottles = new Stack<int>(bottles);
            int CurrCupCapacity = Cups.Peek();
            int CurrBottleLitters = Bottles.Peek();
            bool Realoading = false;
            int WastedWatter = 0;
            while (true)
            {
                if (Realoading && Cups.Count > 0 && Bottles.Count > 0)
                {
                    CurrCupCapacity = Cups.Peek();
                    CurrBottleLitters = Bottles.Peek();
                    Realoading = false;
                }
                else if (Cups.Count == 0 || Bottles.Count == 0)
                {
                    if (Cups.Count == 0)
                    {
                        Console.WriteLine($"Bottles: {string.Join(" ",Bottles)}");
                    }
                    else
                    {
                        Console.WriteLine($"Cups: {string.Join(" ",Cups)}");
                    }
                    Console.WriteLine($"Wasted litters of water: {WastedWatter}");
                    break;
                }
                if (CurrCupCapacity - CurrBottleLitters > 0)
                {
                    CurrCupCapacity -= CurrBottleLitters;
                    Bottles.Pop();
                    if (Bottles.Count > 0)
                    {
                        CurrBottleLitters = Bottles.Peek();
                    }
                }
                else if (CurrCupCapacity - CurrBottleLitters <= 0)
                {
                    WastedWatter += (CurrBottleLitters - CurrCupCapacity);
                    Cups.Dequeue();
                    Bottles.Pop();
                    Realoading = true;
                }
            }
        }
    }
}
